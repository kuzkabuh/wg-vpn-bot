from __future__ import annotations

from datetime import datetime, timezone
import time
import html
from typing import Tuple, Optional, List

from aiogram import Router, F
from aiogram.types import (
    CallbackQuery,
    Message,
    BufferedInputFile,
    ForceReply,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..db import (
    get_user_by_tgid,
    count_user_peers,
    add_peer_row,
    get_user_peers,
    update_user,          # –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ‚Äî –æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –±—É–¥—É—â–µ–µ
    revoke_peer_row,
)

# –º—è–≥–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: –µ—Å–ª–∏ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –æ—Ç–∫–ª—é—á–∏–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
try:
    from ..db import rename_peer_row  # def rename_peer_row(peer_row_id: int, new_name: str) -> None
except Exception:
    rename_peer_row = None  # type: ignore

from ..settings import SET
from ..keyboards import kb_user_main
from ..utils import check_limit, human_dt, make_qr_png
from ..wgd_api import wgd, WGDError

__all__ = ["router"]

router = Router()


# ======================== –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ========================

def _main_menu_for(c: CallbackQuery):
    is_admin = bool(c.from_user and c.from_user.id in SET.admin_ids)
    return kb_user_main(is_admin=is_admin)

def _fmt_bytes(n: int | float | None) -> str:
    if not n or n <= 0:
        return "0 B"
    n = float(n)
    units = ["B", "KB", "MB", "GB", "TB"]
    i = 0
    while n >= 1024.0 and i < len(units) - 1:
        n /= 1024.0
        i += 1
    if n >= 100 or i == 0:
        return f"{int(n)} {units[i]}"
    return f"{n:.1f} {units[i]}"

def _fmt_hs(ts: Optional[int]) -> str:
    if not ts:
        return "‚Äî"
    try:
        diff = int(time.time() - int(ts))
    except Exception:
        return "‚Äî"
    if diff < 0:
        diff = 0
    if diff < 120:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    mins = diff // 60
    if mins < 60:
        return f"{mins} –º–∏–Ω –Ω–∞–∑–∞–¥"
    hours = mins // 60
    if hours < 24:
        return f"{hours} —á –Ω–∞–∑–∞–¥"
    days = hours // 24
    return f"{days} –¥–Ω –Ω–∞–∑–∞–¥"

def _status_dot(active: bool) -> str:
    return "üü¢" if active else "‚ö´Ô∏è"


# ======================== –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ========================

def _user_config_params(tg_id: int) -> Tuple[str, str, int]:
    """
    –ò–º—è, –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    - –ò–º—è:   wg<tg_id>
    - –ê–¥—Ä–µ—Å: 10.88.<20..219>.1/24 (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç tg_id)
    - –ü–æ—Ä—Ç:  20000..49999 (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ tg_id)
    """
    cfg_name = f"wg{tg_id}"
    third_octet = 20 + (tg_id % 200)  # 20..219
    address = f"10.88.{third_octet}.1/24"
    listen_port = 20000 + (tg_id % 30000)  # 20000..49999
    return cfg_name, address, listen_port


# ======================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ========================

def _kb_peers_list(items: List[tuple[str, str, str]]):
    """
    items: (title, cfg, pid) -> –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∏—Ä–∞
    callback: up:s|<cfg>|<pid>
    """
    kb = InlineKeyboardBuilder()
    for title, cfg, pid in items:
        kb.button(text=f"üîπ {title}", callback_data=f"up:s|{cfg}|{pid}")
    kb.adjust(1)
    kb.button(text="‚ûï –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data="user:newpeer")
    kb.button(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="up:main")
    kb.adjust(1)
    return kb.as_markup()

def _kb_peer_actions(cfg: str, pid: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì• –ö–æ–Ω—Ñ–∏–≥", callback_data=f"up:d|{cfg}|{pid}")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"up:x|{cfg}|{pid}")
    kb.adjust(2)
    kb.button(text="‚úèÔ∏è –ò–º—è", callback_data=f"up:r|{cfg}|{pid}")
    kb.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"up:s|{cfg}|{pid}")
    kb.adjust(2)
    kb.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="user:peers")
    kb.adjust(1)
    return kb.as_markup()


# ======================== –ö–æ–º–∞–Ω–¥—ã –∏ –∫–æ–ª–±—ç–∫–∏ ========================

@router.callback_query(F.data == "up:main")
async def back_to_main(c: CallbackQuery):
    try:
        await c.answer()
    except Exception:
        pass
    await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=_main_menu_for(c))


@router.callback_query(F.data == "user:plan")
async def user_plan(c: CallbackQuery) -> None:
    try:
        await c.answer()
    except Exception:
        pass

    if not c.from_user:
        await c.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    u = get_user_by_tgid(c.from_user.id)
    if not u or u.status != "approved":
        await c.message.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=_main_menu_for(c))
        return

    exp = human_dt(u.expires_at) if u.expires_at else "‚àû"
    limit = "–±–µ–∑–ª–∏–º–∏—Ç" if (u.devices_limit is not None and u.devices_limit < 0) else str(u.devices_limit or 0)

    text = (
        f"<b>–í–∞—à –ø–ª–∞–Ω</b>\n"
        f"–¢–∞—Ä–∏—Ñ: <b>{html.escape(u.plan)}</b>\n"
        f"–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: <b>{html.escape(limit)}</b>\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{html.escape(exp)}</b>"
    )
    await c.message.answer(text, reply_markup=_main_menu_for(c), parse_mode="HTML")


@router.callback_query(F.data == "user:peers")
async def user_peers(c: CallbackQuery) -> None:
    try:
        await c.answer()
    except Exception:
        pass

    if not c.from_user:
        await c.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    u = get_user_by_tgid(c.from_user.id)
    if not u or u.status != "approved":
        await c.message.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=_main_menu_for(c))
        return

    rows = get_user_peers(u.id)
    if not rows:
        await c.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.", reply_markup=_main_menu_for(c))
        return

    # –°–Ω–∏–º–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤/–ø–∏—Ä–æ–≤ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    try:
        snap = await wgd.snapshot()
    except WGDError as e:
        await c.message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {html.escape(str(e))}", reply_markup=_main_menu_for(c))
        return

    # –¢–∞–±–ª–∏—Ü–∞ –∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    items_for_kb: List[tuple[str, str, str]] = []
    lines: List[str] = []
    lines.append("<b>üß© –í–∞—à–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>")
    lines.append("<pre>")
    lines.append(f"{'–ü–∏—Ä':28} {'RX':>8} {'TX':>8} {'HS':>12} {'CFG':>12} {'ST':>3}")
    lines.append(f"{'-'*28} {'-'*8} {'-'*8} {'-'*12} {'-'*12} {'-'*3}")

    total_rx = 0
    total_tx = 0

    for r in rows:
        cfg = getattr(r, "interface", None) or getattr(r, "wgd_interface", None) or f"wg{c.from_user.id}"
        pid = str(r.wgd_peer_id)
        title = (r.name or pid[:10]).strip()

        p = wgd.find_peer_in_snapshot(snap, cfg, pid) or {}
        rx = int(p.get("rx", 0) or 0)
        tx = int(p.get("tx", 0) or 0)
        hs = _fmt_hs(p.get("last_handshake"))
        st = _status_dot(bool(p.get("active", False)))

        total_rx += rx
        total_tx += tx

        # –≤ —Ç–∞–±–ª–∏—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –ø–æ—ç—Ç–æ–º—É –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–¥–µ—Å—å
        lines.append(f"{title[:28]:28} {_fmt_bytes(rx):>8} {_fmt_bytes(tx):>8} {hs:>12} {cfg[-12:]:>12} {st:>3}")
        items_for_kb.append((title, cfg, pid))

    lines.append("</pre>")
    lines.append(f"–í—Å–µ–≥–æ –ø–∏—Ä–æ–≤: <b>{len(rows)}</b> ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: ‚¨á {_fmt_bytes(total_rx)} ‚¨Ü {_fmt_bytes(total_tx)}")

    await c.message.answer(
        "\n".join(lines),
        reply_markup=_kb_peers_list(items_for_kb),
        parse_mode="HTML",
    )


@router.callback_query(F.data.startswith("up:s|"))
async def peer_show(c: CallbackQuery):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∏—Ä–∞ + –¥–µ–π—Å—Ç–≤–∏—è."""
    try:
        await c.answer()
    except Exception:
        pass

    try:
        _, rest = c.data.split("up:s|", 1)
        cfg, pid = rest.split("|", 1)
    except Exception:
        await c.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
        return

    u = get_user_by_tgid(c.from_user.id) if c.from_user else None
    row = None
    if u:
        for r in get_user_peers(u.id):
            if str(r.wgd_peer_id) == pid:
                row = r
                break

    try:
        snap = await wgd.snapshot()
    except WGDError as e:
        await c.message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {html.escape(str(e))}")
        return

    p = wgd.find_peer_in_snapshot(snap, cfg, pid) or {}
    title = (row.name if row else p.get("name")) or pid[:12]

    rx = _fmt_bytes(p.get("rx", 0))
    tx = _fmt_bytes(p.get("tx", 0))
    hs = _fmt_hs(p.get("last_handshake"))
    st = _status_dot(bool(p.get("active", False)))

    text = (
        f"üéõ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</b>\n"
        f"<code>{html.escape(title)}</code>\n\n"
        f"<b>CFG:</b> <code>{html.escape(cfg)}</code>\n"
        f"<b>ID:</b> <code>{html.escape(pid)}</code>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {st}\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π HS:</b> {html.escape(hs)}\n"
        f"<b>–¢—Ä–∞—Ñ–∏–∫:</b> ‚¨á {html.escape(rx)} ‚¨Ü {html.escape(tx)}"
    )

    await c.message.answer(
        text,
        reply_markup=_kb_peer_actions(cfg, pid),
        parse_mode="HTML",
    )


@router.callback_query(F.data.startswith("up:d|"))
async def peer_download(c: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å .conf + QR."""
    try:
        await c.answer()
    except Exception:
        pass

    try:
        _, rest = c.data.split("up:d|", 1)
        cfg, pid = rest.split("|", 1)
    except Exception:
        await c.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
        return

    try:
        conf_text = await wgd.get_peer_config(cfg, pid)
    except WGDError as e:
        await c.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥: {html.escape(str(e))}")
        return

    fname = f"{cfg}-{pid[:8]}.conf"
    cfg_bytes = conf_text.encode("utf-8")
    qr_bytes = make_qr_png(conf_text)

    await c.message.answer_document(BufferedInputFile(cfg_bytes, filename=fname))
    await c.message.answer_photo(BufferedInputFile(qr_bytes, filename=f"{fname[:-5]}.png"))


@router.callback_query(F.data.startswith("up:x|"))
async def peer_delete(c: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –ø–∏—Ä –∏–∑ WGDashboard –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î."""
    try:
        await c.answer()
    except Exception:
        pass

    try:
        _, rest = c.data.split("up:x|", 1)
        cfg, pid = rest.split("|", 1)
    except Exception:
        await c.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
        return

    u = get_user_by_tgid(c.from_user.id) if c.from_user else None
    row_id = None
    row_name = None
    if u:
        for r in get_user_peers(u.id):
            if str(r.wgd_peer_id) == pid:
                row_id = r.id
                row_name = r.name
                break

    try:
        await wgd.delete_peer(cfg, str(pid))
    except WGDError as e:
        await c.message.answer(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ WGDashboard: {html.escape(str(e))}")
        return

    if row_id is not None:
        try:
            revoke_peer_row(row_id)
        except Exception:
            pass

    await c.message.answer(
        f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ <code>{html.escape(row_name or pid[:12])}</code> —É–¥–∞–ª–µ–Ω–æ.",
        parse_mode="HTML",
    )
    # –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await user_peers(c)


# ======================== –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–ª–æ–∫–∞–ª—å–Ω–æ) ========================

_RENAME_WAIT: dict[int, tuple[str, str]] = {}

@router.callback_query(F.data.startswith("up:r|"))
async def peer_rename_start(c: CallbackQuery):
    try:
        await c.answer()
    except Exception:
        pass

    if rename_peer_row is None:
        await c.message.answer("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ rename_peer_row –≤ –ë–î).")
        return

    try:
        _, rest = c.data.split("up:r|", 1)
        cfg, pid = rest.split("|", 1)
    except Exception:
        await c.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")
        return

    if not c.from_user:
        await c.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    _RENAME_WAIT[c.from_user.id] = (cfg, pid)
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=ForceReply(selective=True))

@router.message(F.reply_to_message, F.text)
async def peer_rename_finish(m: Message):
    if not m.from_user:
        return
    key = m.from_user.id
    if key not in _RENAME_WAIT:
        return

    cfg, pid = _RENAME_WAIT.pop(key)
    new_name = (m.text or "").strip()
    if not new_name:
        await m.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    u = get_user_by_tgid(m.from_user.id)
    if not u:
        await m.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start.")
        return

    target = None
    for r in get_user_peers(u.id):
        if str(r.wgd_peer_id) == pid:
            target = r
            break

    if not target:
        await m.answer("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if rename_peer_row is None:
        await m.answer("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    try:
        rename_peer_row(target.id, new_name)
    except Exception as e:
        await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å: {html.escape(str(e))}", parse_mode="HTML")
        return

    await m.answer(f"–ì–æ—Ç–æ–≤–æ. –ù–æ–≤–æ–µ –∏–º—è: <code>{html.escape(new_name)}</code>", parse_mode="HTML")

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    fake_cb = CallbackQuery(id="0", from_user=m.from_user, chat_instance="", message=m, data=f"up:s|{cfg}|{pid}")
    await peer_show(fake_cb)


# ======================== –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ========================

@router.callback_query(F.data == "user:newpeer")
async def user_newpeer(c: CallbackQuery) -> None:
    try:
        await c.answer()
    except Exception:
        pass

    if not c.from_user:
        await c.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    u = get_user_by_tgid(c.from_user.id)
    if not u or u.status != "approved":
        await c.message.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=_main_menu_for(c))
        return

    now = int(datetime.now(tz=timezone.utc).timestamp())

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞ (–¥–ª—è –Ω–µ-unlimited)
    if u.plan != "unlimited" and (not u.expires_at or now > u.expires_at):
        await c.message.answer(
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏—Å—Ç—ë–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=_main_menu_for(c),
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    cur = count_user_peers(u.id)
    if not check_limit(cur, u.devices_limit):
        await c.message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.", reply_markup=_main_menu_for(c))
        return

    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è WG-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cfg_name, cfg_addr, cfg_port = _user_config_params(c.from_user.id)

    # –°–æ–∑–¥–∞–Ω–∏–µ peer –≤ WGDashboard
    name = f"{(c.from_user.username or 'user').strip()}-{c.from_user.id}-{now}"
    try:
        # –≥–∞—Ä–∞–Ω—Ç–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await wgd.ensure_config(cfg_name, address=cfg_addr, listen_port=cfg_port, protocol="wg")

        # —Å–æ–∑–¥–∞—ë–º –ø–∏—Ä –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        peer_pubkey_or_id = await wgd.create_peer(cfg_name, name)

        # —Å–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–º–µ–Ω–Ω–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_text = await wgd.get_peer_config(cfg_name, peer_pubkey_or_id)

    except WGDError as e:
        await c.message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {html.escape(str(e))}", reply_markup=_main_menu_for(c), parse_mode="HTML")
        return
    except Exception as e:
        await c.message.answer(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {html.escape(str(e))}", reply_markup=_main_menu_for(c), parse_mode="HTML")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    add_peer_row(u.id, cfg_name, peer_pubkey_or_id, name)

    # –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª—ã
    cfg_bytes = config_text.encode("utf-8")
    qr_bytes = make_qr_png(config_text)

    await c.message.answer("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ. –°–∫–∞—á–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥.")
    await c.message.answer_document(BufferedInputFile(cfg_bytes, filename=f"{name}.conf"))
    await c.message.answer_photo(BufferedInputFile(qr_bytes, filename=f"{name}.png"), reply_markup=_main_menu_for(c))


@router.callback_query(F.data == "user:delpeer")
async def user_delpeer(c: CallbackQuery) -> None:
    try:
        await c.answer()
    except Exception:
        pass

    if not c.from_user:
        await c.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    u = get_user_by_tgid(c.from_user.id)
    if not u or u.status != "approved":
        await c.message.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=_main_menu_for(c))
        return

    rows = get_user_peers(u.id)
    if not rows:
        await c.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.", reply_markup=_main_menu_for(c))
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–∏–ª–∏ –ø–æ id, –µ—Å–ª–∏ –Ω–µ—Ç created_at)
    try:
        target = sorted(rows, key=lambda x: getattr(x, "created_at", 0) or getattr(x, "id", 0))[-1]
    except Exception:
        target = rows[-1]

    cfg_for_target = getattr(target, "interface", None) or getattr(target, "wgd_interface", None) or f"wg{c.from_user.id}"

    try:
        await wgd.delete_peer(cfg_for_target, str(target.wgd_peer_id))
    except WGDError as e:
        await c.message.answer(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ WGDashboard: {html.escape(str(e))}", reply_markup=_main_menu_for(c), parse_mode="HTML")
        return
    except Exception as e:
        await c.message.answer(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {html.escape(str(e))}", reply_markup=_main_menu_for(c), parse_mode="HTML")
        return

    revoke_peer_row(target.id)
    await c.message.answer(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ <code>{html.escape(target.name)}</code> —É–¥–∞–ª–µ–Ω–æ.", reply_markup=_main_menu_for(c), parse_mode="HTML")
