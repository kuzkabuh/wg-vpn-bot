from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

from ..db import get_or_create_user, get_user_by_tgid
from ..settings import SET
from ..keyboards import kb_register, kb_user_main

__all__ = ["router"]

router = Router()


@router.message(CommandStart())
async def cmd_start(m: Message) -> None:
    if not m.from_user:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    u = get_or_create_user(
        m.from_user.id,
        m.from_user.username,
        m.from_user.first_name,
        m.from_user.last_name,
    )
    is_admin = m.from_user.id in SET.admin_ids

    if getattr(u, "status", None) == "pending" and not is_admin:
        await m.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–í—ã –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=kb_register(),
        )
        return

    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_user_main(is_admin=is_admin))


@router.message(Command("admin"))
async def cmd_admin_help(m: Message) -> None:
    if not m.from_user or m.from_user.id not in SET.admin_ids:
        return
    await m.answer(
        "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
        "‚Ä¢ <code>/pending</code> ‚Äî –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ –ê–¥–º–∏–Ω-–º–µ–Ω—é: –∫–Ω–æ–ø–∫–∞ ¬´–ê–¥–º–∏–Ω: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
    )


@router.callback_query(F.data == "reg:start")
async def reg_start(c: CallbackQuery) -> None:
    try:
        await c.answer()
    except Exception:
        pass

    if not c.from_user:
        await c.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    u = get_user_by_tgid(c.from_user.id)
    if not u:
        await c.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    if getattr(u, "status", None) != "pending":
        await c.message.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    username = f"@{c.from_user.username}" if c.from_user.username else "(–Ω–µ—Ç username)"
    text = (
        "üÜï –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø\n"
        f"tg_id={c.from_user.id}\n"
        f"username={username}"
    )

    for admin_id in SET.admin_ids:
        try:
            await c.bot.send_message(admin_id, text)
            await c.bot.send_message(admin_id, "–û—Ç–∫—Ä–æ–π—Ç–µ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Üí –ó–∞—è–≤–∫–∏")
        except Exception:
            pass

    await c.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# ‚îÄ‚îÄ‚îÄ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(F.text.startswith("/"), ~CommandStart())
async def unknown_command(m: Message) -> None:
    await m.answer("–Ø –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã <b>/start</b> –∏ ¬´<b>/—Å—Ç–∞—Ä—Ç</b>¬ª. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.", parse_mode="HTML")

@router.message(F.text.regexp(r"(?i)^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|hi|hello|–¥–æ–±—Ä—ã–π|–∑–¥–∞—Ä–æ–≤).*$"))
async def greet_text(m: Message) -> None:
    await m.answer("–ü—Ä–∏–≤–µ—Ç! üëã –ù–∞–∂–º–∏—Ç–µ /start (–∏–ª–∏ ¬´/—Å—Ç–∞—Ä—Ç¬ª), —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.")

@router.message(F.text)
async def any_text(m: Message) -> None:
    await m.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start (–∏–ª–∏ ¬´/—Å—Ç–∞—Ä—Ç¬ª).")
