from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from html import escape

from ..db import get_or_create_user, get_user_by_tgid
from ..settings import SET
from ..keyboards import kb_register, kb_user_main

__all__ = ["router"]

router = Router()


# ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def _is_greeting(text: str) -> bool:
    t = (text or "").strip().lower()
    if not t:
        return False
    greetings = (
        "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å",
        "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "—Å–∞–ª—é—Ç", "hi", "hello", "hey", "yo"
    )
    return any(t.startswith(g) or t == g for g in greetings)

def _main_menu(is_admin: bool):
    return kb_user_main(is_admin=is_admin)


# ‚îÄ‚îÄ‚îÄ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(CommandStart())
async def cmd_start(m: Message) -> None:
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –≤ —Ä–µ–¥–∫–∏—Ö —Ç–∏–ø–∞—Ö –∞–ø–¥–µ–π—Ç–æ–≤ from_user –º–æ–∂–µ—Ç –±—ã—Ç—å None
    if not m.from_user:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    u = get_or_create_user(
        m.from_user.id,
        m.from_user.username,
        m.from_user.first_name,
        m.from_user.last_name,
    )
    is_admin = m.from_user.id in SET.admin_ids

    # –û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∞–¥–º–∏–Ω–∞–º ‚Äî —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if getattr(u, "status", None) == "pending" and not is_admin:
        await m.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–í—ã –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=kb_register(),
        )
        return

    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=_main_menu(is_admin=is_admin))


# ‚îÄ‚îÄ‚îÄ /admin ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(Command("admin"))
async def cmd_admin(m: Message) -> None:
    if not m.from_user or m.from_user.id not in SET.admin_ids:
        # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
        return

    await m.answer(
        "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
        "‚Ä¢ <code>/pending</code> ‚Äî –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ <code>/grant_trial &lt;tg_id&gt;</code>\n"
        "‚Ä¢ <code>/grant_paid &lt;tg_id&gt;</code>\n"
        "‚Ä¢ <code>/grant_unlim &lt;tg_id&gt;</code>",
        parse_mode="HTML",
    )


# ‚îÄ‚îÄ‚îÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (callback) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.callback_query(F.data == "reg:start")
async def reg_start(c: CallbackQuery) -> None:
    # –ë—ã—Å—Ç—Ä—ã–π ACK, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å timeout –≤ callback (–¥–æ 3 —Å–µ–∫—É–Ω–¥)
    try:
        await c.answer()
    except Exception:
        pass

    if not c.from_user:
        await c.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    u = get_user_by_tgid(c.from_user.id)
    if not u:
        await c.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    if getattr(u, "status", None) != "pending":
        await c.message.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    username = f"@{c.from_user.username}" if c.from_user.username else "(–Ω–µ—Ç username)"
    text = (
        "üÜï –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø\n"
        f"tg_id={c.from_user.id}\n"
        f"username={username}"
    )

    for admin_id in SET.admin_ids:
        try:
            await c.bot.send_message(admin_id, text)
            await c.bot.send_message(admin_id, "–û—Ç–∫—Ä–æ–π—Ç–µ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Üí –ó–∞—è–≤–∫–∏")
        except Exception:
            # –ù–µ –≤–∞–ª–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –æ–¥–Ω–æ–º—É –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ –¥–æ—Å—Ç–∞–≤–∏–ª–æ—Å—å
            pass

    await c.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# ‚îÄ‚îÄ‚îÄ –õ–æ–≤—É—à–∫–∞ –¥–ª—è –õ–Æ–ë–´–• –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(F.text.startswith("/"))
async def any_command_hint(m: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É (–∫—Ä–æ–º–µ /start ‚Äî –µ–≥–æ –ª–æ–≤–∏—Ç CommandStart-—Ö—ç–Ω–¥–ª–µ—Ä –≤—ã—à–µ)
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ /start –∏–ª–∏ /—Å—Ç–∞—Ä—Ç.
    """
    txt = (m.text or "").strip().lower()
    if txt.startswith("/start") or txt.startswith("/—Å—Ç–∞—Ä—Ç"):
        return  # —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç cmd_start
    await m.answer(
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /—Å—Ç–∞—Ä—Ç.\n"
        "–ï—Å–ª–∏ –±–æ—Ç –º–æ–ª—á–∏—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –∫–æ–º–∞–Ω–¥—É /start."
    )


# ‚îÄ‚îÄ‚îÄ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –õ–Æ–ë–û–ï —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(F.text & ~F.text.startswith("/"))
async def any_text_reply(m: Message) -> None:
    """
    –î—Ä—É–∂–µ–ª—é–±–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ª—é–±–æ–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    ‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
    ‚Ä¢ –ù–∏—á–µ–≥–æ –Ω–µ ¬´—ç—Ö–∞–µ–º¬ª –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (escape), —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å HTML.
    ‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ /start.
    """
    text = m.text or ""
    if _is_greeting(text):
        await m.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /—Å—Ç–∞—Ä—Ç.")
        return

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ (—Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –≤–∫–ª—é—á–∞—Ç HTML –≥–¥–µ-—Ç–æ –≤—ã—à–µ)
    safe_snippet = escape(text[:64])  # –ª—ë–≥–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–ø—ã—Ç–æ–∫ –∏–Ω—ä–µ–∫—Ü–∏–π/—Å–ø–∞–º–∞
    if safe_snippet:
        await m.answer(f"–Ø –≤–∞—Å —É—Å–ª—ã—à–∞–ª: <code>{safe_snippet}</code>\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start.",
                       parse_mode="HTML")
    else:
        await m.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /—Å—Ç–∞—Ä—Ç.")


# ‚îÄ‚îÄ‚îÄ –§–æ–ª–±—ç–∫ –Ω–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∏–∫–µ—Ä—ã/—Ñ–æ—Ç–æ/–≥–æ–ª–æ—Å) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message()
async def any_other_update(m: Message) -> None:
    """
    –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–æ–ª–±—ç–∫-—Ö—ç–Ω–¥–ª–µ—Ä: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ,
    –≤–µ–∂–ª–∏–≤–æ –ø–æ–¥—Å–∫–∞–∂–µ–º –ø—Ä–æ /start. –°—Ç–∞–≤–∏—Çc—è –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º.
    """
    await m.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /—Å—Ç–∞—Ä—Ç.")
