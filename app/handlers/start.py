# app/handlers/start.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

from ..db import get_or_create_user, get_user_by_tgid
from ..settings import SET
from ..keyboards import kb_register, kb_user_main

__all__ = ["router"]

router = Router()


@router.message(CommandStart())
async def cmd_start(m: Message) -> None:
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –≤ —Ä–µ–¥–∫–∏—Ö —Ç–∏–ø–∞—Ö –∞–ø–¥–µ–π—Ç–æ–≤ from_user –º–æ–∂–µ—Ç –±—ã—Ç—å None
    if not m.from_user:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    u = get_or_create_user(
        m.from_user.id,
        m.from_user.username,
        m.from_user.first_name,
        m.from_user.last_name,
    )
    is_admin = m.from_user.id in SET.admin_ids

    # –û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∞–¥–º–∏–Ω–∞–º ‚Äî —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if getattr(u, "status", None) == "pending" and not is_admin:
        await m.answer(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
            "–í—ã –µ—â—ë –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=kb_register(),
        )
        return

    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_user_main(is_admin=is_admin))


@router.message(Command("admin"))
async def cmd_admin(m: Message) -> None:
    if not m.from_user or m.from_user.id not in SET.admin_ids:
        # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML + <code> –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≥–ª–æ–≤—ã—Ö —Å–∫–æ–±–æ–∫
    await m.answer(
        "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
        "‚Ä¢ <code>/pending</code> ‚Äî –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ <code>/grant_trial &lt;tg_id&gt;</code>\n"
        "‚Ä¢ <code>/grant_paid &lt;tg_id&gt;</code>\n"
        "‚Ä¢ <code>/grant_unlim &lt;tg_id&gt;</code>"
    )


@router.callback_query(F.data == "reg:start")
async def reg_start(c: CallbackQuery) -> None:
    # –ë—ã—Å—Ç—Ä—ã–π ACK, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å timeout –≤ callback (–¥–æ 3 —Å–µ–∫—É–Ω–¥)
    try:
        await c.answer()
    except Exception:
        # –î–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ —Å–º–æ–≥–ª–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        pass

    if not c.from_user:
        await c.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    u = get_user_by_tgid(c.from_user.id)
    if not u:
        await c.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ /start")
        return

    if getattr(u, "status", None) != "pending":
        await c.message.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return

    username = f"@{c.from_user.username}" if c.from_user.username else "(–Ω–µ—Ç username)"
    text = (
        "üÜï –ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø\n"
        f"tg_id={c.from_user.id}\n"
        f"username={username}"
    )

    for admin_id in SET.admin_ids:
        try:
            await c.bot.send_message(admin_id, text)
            await c.bot.send_message(admin_id, "–û—Ç–∫—Ä–æ–π—Ç–µ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Üí –ó–∞—è–≤–∫–∏")
        except Exception:
            # –ù–µ –≤–∞–ª–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –æ–¥–Ω–æ–º—É –∏–∑ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ –¥–æ—Å—Ç–∞–≤–∏–ª–æ—Å—å
            pass

    await c.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
