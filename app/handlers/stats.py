# app/handlers/stats.py
from __future__ import annotations

from typing import List

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from ..settings import SET
from ..db import get_user_by_tgid, get_user_peers
from ..utils import human_bytes, human_ago, render_table
from ..wgd_api import wgd, WGDError

router = Router()

# =========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =========================

def _is_admin(tg_id: int | None) -> bool:
    return bool(tg_id) and tg_id in SET.admin_ids

def _safe_human_ago(ts) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ '–ø–æ—Å–ª–µ–¥–Ω–∏–π handshake'."""
    try:
        if not ts or int(ts) <= 0:
            return "‚Äî"
        return human_ago(int(ts))
    except Exception:
        return "‚Äî"

def _esc(val: object) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è HTML <pre> —Ç–∞–±–ª–∏—Ü—ã."""
    s = str(val) if val is not None else ""
    # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –¥–ª—è <pre>
    return (
        s.replace("&", "&amp;")
         .replace("<", "&lt;")
         .replace(">", "&gt;")
    )

async def _safe_answer(to: Message, text: str, *, parse_mode: str = "HTML") -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Ä—Ü–∏—è–º–∏, —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç Telegram (~4096).
    –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å –∑–∞–ø–∞—Å–æ–º –ø–æ–¥ HTML.
    """
    if not text:
        return
    max_len = 3800  # –∑–∞–ø–∞—Å –ø–æ–¥ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if len(text) <= max_len:
        await to.answer(text, parse_mode=parse_mode, disable_web_page_preview=True)
        return

    buf = ""
    for line in text.splitlines(keepends=True):
        if len(buf) + len(line) > max_len:
            await to.answer(buf, parse_mode=parse_mode, disable_web_page_preview=True)
            buf = ""
        buf += line
    if buf:
        await to.answer(buf, parse_mode=parse_mode, disable_web_page_preview=True)

# =========================
# USER: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# =========================

@router.callback_query(F.data == "user:stats")
async def cb_user_stats(c: CallbackQuery):
    try:
        await c.answer()
    except Exception:
        pass
    await _send_user_stats(to=c.message, tg_id=c.from_user.id if c.from_user else 0)

@router.message(Command("stats"))
async def cmd_user_stats(m: Message):
    await _send_user_stats(to=m, tg_id=m.from_user.id if m.from_user else 0)

async def _send_user_stats(to: Message, tg_id: int):
    u = get_user_by_tgid(tg_id)
    if not u or u.status != "approved":
        await _safe_answer(to, "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    peer_rows = get_user_peers(u.id)
    if not peer_rows:
        await _safe_answer(to, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.")
        return

    try:
        snap = await wgd.snapshot()
    except WGDError as e:
        await _safe_answer(to, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return

    total_rx = 0
    total_tx = 0
    rows: List[List[str]] = []

    for pr in peer_rows:
        # –í –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—Ç CFG, —á—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è —É –Ω–∞—Å –≤ –ë–î; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        cfg = getattr(pr, "interface", None) or getattr(pr, "wgd_interface", None) or SET.wgd_interface
        pid = str(pr.wgd_peer_id)

        p = wgd.find_peer_in_snapshot(snap, cfg, pid)
        if not p:
            rows.append([_esc(pr.name), "‚Äî", "‚Äî", "‚Äî", _esc(cfg), "‚ö™Ô∏è"])
            continue

        total_rx += int(p["rx"])
        total_tx += int(p["tx"])
        status = "üü¢" if p["active"] else "‚ö™Ô∏è"

        rows.append([
            _esc(p["name"]),
            _esc(human_bytes(p["rx"])),
            _esc(human_bytes(p["tx"])),
            _esc(_safe_human_ago(p["last_handshake"])),
            _esc(cfg),
            status,
        ])

    header = ["–ü–∏—Ä", "RX", "TX", "–ü–æ—Å–ª–µ–¥–Ω–∏–π HS", "CFG", "St"]
    table = render_table(header, rows)

    cap = (
        "<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"–í—Å–µ–≥–æ –ø–∏—Ä–æ–≤: <b>{len(peer_rows)}</b>\n"
        f"–¢—Ä–∞—Ñ–∏–∫: ‚¨áÔ∏è {human_bytes(total_rx)}  ‚¨ÜÔ∏è {human_bytes(total_tx)}\n"
    )
    await _safe_answer(to, cap + "\n" + table)

# =========================
# ADMIN: —Å—É–º–º–∞—Ä–∫–∞ –∏ –æ–±–∑–æ—Ä—ã
# =========================

@router.callback_query(F.data == "admin:stats")
async def cb_admin_stats(c: CallbackQuery):
    if not _is_admin(getattr(c.from_user, "id", None)):
        await _safe_answer(c.message, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    try:
        await c.answer()
    except Exception:
        pass
    await _send_admin_stats(c.message)

@router.message(Command("admin_stats"))
async def cmd_admin_stats(m: Message):
    if not _is_admin(getattr(m.from_user, "id", None)):
        return
    await _send_admin_stats(m)

async def _send_admin_stats(to: Message):
    try:
        totals = await wgd.totals()
    except WGDError as e:
        await _safe_answer(to, f"–û—à–∏–±–∫–∞: {e}")
        return

    text = (
        "<b>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: <b>{totals['configs']}</b>\n"
        f"–ü–∏—Ä–æ–≤: <b>{totals['peers']}</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{totals['active_peers']}</b>\n"
        f"–¢—Ä–∞—Ñ–∏–∫: ‚¨áÔ∏è {human_bytes(totals['rx'])}  ‚¨ÜÔ∏è {human_bytes(totals['tx'])}\n"
    )
    await _safe_answer(to, text)

# --- —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ---

@router.callback_query(F.data == "admin:cfgs")
async def cb_admin_cfgs(c: CallbackQuery):
    if not _is_admin(getattr(c.from_user, "id", None)):
        await _safe_answer(c.message, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    try:
        await c.answer()
    except Exception:
        pass
    await _send_admin_cfgs(c.message)

@router.message(Command("admin_cfgs"))
async def cmd_admin_cfgs(m: Message):
    if not _is_admin(getattr(m.from_user, "id", None)):
        return
    await _send_admin_cfgs(m)

async def _send_admin_cfgs(to: Message):
    try:
        snap = await wgd.snapshot()
    except WGDError as e:
        await _safe_answer(to, f"–û—à–∏–±–∫–∞: {e}")
        return

    if not snap:
        await _safe_answer(to, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    rows: List[List[str]] = []
    for name in sorted(snap.keys()):
        peers = snap[name]["peers"]
        active = sum(1 for p in peers if p["active"])
        rx = sum(p["rx"] for p in peers)
        tx = sum(p["tx"] for p in peers)
        rows.append([_esc(name), str(len(peers)), str(active), human_bytes(rx), human_bytes(tx)])

    table = render_table(["CFG", "–ü–∏—Ä–æ–≤", "–ê–∫—Ç–∏–≤", "RX", "TX"], rows)
    await _safe_answer(to, "<b>üß© –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>\n\n" + table)

# --- –≤—Å–µ –ø–∏—Ä—ã (—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç Telegram) ---

@router.callback_query(F.data == "admin:peers")
async def cb_admin_peers(c: CallbackQuery):
    if not _is_admin(getattr(c.from_user, "id", None)):
        await _safe_answer(c.message, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    try:
        await c.answer()
    except Exception:
        pass
    await _send_admin_peers(c.message)

@router.message(Command("admin_peers"))
async def cmd_admin_peers(m: Message):
    if not _is_admin(getattr(m.from_user, "id", None)):
        return
    await _send_admin_peers(m)

async def _send_admin_peers(to: Message):
    try:
        snap = await wgd.snapshot()
    except WGDError as e:
        await _safe_answer(to, f"–û—à–∏–±–∫–∞: {e}")
        return

    rows: List[List[str]] = []
    # –ü–æ—Ä—è–¥–æ–∫: –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–≤–µ—Ä—Ö—É, –∑–∞—Ç–µ–º –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É —Ç—Ä–∞—Ñ–∏–∫—É
    for name in sorted(snap.keys()):
        peers = sorted(
            snap[name]["peers"],
            key=lambda p: (not p["active"], -(int(p["rx"]) + int(p["tx"]))),
        )
        for p in peers:
            status = "üü¢" if p["active"] else "‚ö™Ô∏è"
            rows.append([
                _esc(name),
                _esc(p["name"]),
                _esc(human_bytes(p["rx"])),
                _esc(human_bytes(p["tx"])),
                _esc(_safe_human_ago(p["last_handshake"])),
                status,
            ])

    if not rows:
        await _safe_answer(to, "–ü–∏—Ä–æ–≤ –Ω–µ—Ç.")
        return

    head = ["CFG", "–ü–∏—Ä", "RX", "TX", "HS", "St"]
    # –†–∞–∑–æ–±—å—ë–º –Ω–∞ –ø–æ—Ä—Ü–∏–∏, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–ª–µ–∑—Ç—å –≤ –ª–∏–º–∏—Ç
    chunk = 80
    total = len(rows)
    sent = 0
    idx = 0

    while sent < total:
        part = rows[sent:sent + chunk]
        table = render_table(head, part)
        idx += 1
        sent += len(part)
        suffix = "" if sent >= total else f"\n‚Ä¶–µ—â—ë {total - sent} —Å—Ç—Ä–æ–∫"
        title = "<b>üë• –í—Å–µ –ø–∏—Ä—ã</b>\n\n" if idx == 1 else ""
        await _safe_answer(to, title + table + suffix)
